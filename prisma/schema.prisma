// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 회원 테이블
model Member {
  id       Int      @id @default(autoincrement())
  kakaoUserId   String?   @unique// 카카오 로그인 사용자 ID
  name     String   // 이름
  img      String?  // 프로필 이미지 URL
  email    String?  @unique // 이메일 (카카오에서 제공)
  alarm    Boolean? @default(false) // 알람
  mode     String?  // 모드
  sound    String?  // 소리

  // 자신과의 다대다(M:N) 친구 관계
  // - MemberFriend를 통해 연결
  // 내가 추가한 친구
  friendsMember MemberFriend[] @relation("MemberFriends_Member")
  // 나를 친구로 하는 멤버
  friendsFriend MemberFriend[] @relation("MemberFriends_Friend")

  // 꽃과의 다대다(M:N) 관계
  // - MemberFlower를 통해 연결
  flowers MemberFlower[]

  // 미션 - 다대다로 변경
  Missions MemberMission[]

  // 집중시간(1:N)
  focusTimes FocusTime[]

  //카테고리(1:N)
  categories Category[]
}

/// 회원 간 친구 다대다 중간 테이블
model MemberFriend {
  memberId Int
  friendId Int

  member Member @relation("MemberFriends_Member", fields: [memberId], references: [id])
  friend Member @relation("MemberFriends_Friend", fields: [friendId], references: [id])

  @@id([memberId, friendId])
}


/// 꽃 테이블
model Flower {
  id         Int     @id @default(autoincrement())
  name       String  // 꽃 이름
  language   String?  // 꽃말
  FlowerImg   String? // 활짝 폈을 때

  // Member와 다대다(M:N) -> MemberFlower 이용
  members MemberFlower[]

  // 특정 미션 수행 시 잠금 해제되는 꽃일 수 있음 (1:N)
  missions Mission[]

  // 집중시간 (1:N)
  focusTimes FocusTime[]
}

/// 회원-꽃 다대다(M:N) 중간 테이블
model MemberFlower {
  memberId Int
  flowerId Int
  unlocked Boolean @default(false) // 잠금해제 여부

  member Member @relation(fields: [memberId], references: [id])
  flower Flower @relation(fields: [flowerId], references: [id])

  @@id([memberId, flowerId])
}

/// 미션 테이블 
model Mission {
  id          Int     @id @default(autoincrement())
  title       String  // 미션 이름
  description String  // 미션 설명
  //memberId    Int     // 미션 주인 (회원)
  flowerId    Int?    // 잠금해제되는 꽃 (없을 수도 있음)
  type        MissionType   //미션 종류
  targetValue  Int     //미션 목표값ㅌ

  //member Member  @relation(fields: [memberId], references: [id])
  flower Flower? @relation(fields: [flowerId], references: [id])
  memberMissions MemberMission[]
}

//회원-미션 중간 테이블
model MemberMission{
  id  Int @id @default(autoincrement())
  memberId Int
  missionId Int
  startDate DateTime?   //연속 미션 시작일자
  completed Boolean @default(false)   //성공 여부
  lastUpdated  DateTime?           //연속 미션 업데이트 날짜

  member Member @relation(fields: [memberId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])

  @@unique([memberId, missionId])
}

/// 꽃말 테이블 (꽃 1개에 여러 꽃말 가능)
//model Floriography {
//  id            Int    @id @default(autoincrement())
//  flower        String
//  languageText  String // 꽃말
//}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id])
}


/// 집중시간 테이블 (회원 1명 : 여러 집중시간)
model FocusTime {
  id          Int           @id @default(autoincrement())
  category    String // 카테고리(예: 공부, 운동 등)
  targetTime  Int           @default(0) // 목표 시간
  time        Int           // 실제 달성 시간
  flowerId    Int           // 어떤 꽃과 연동
  memberId    Int           // 어떤 회원의 집중시간인지
  createdAt   DateTime?     @default(now()) // 만든 시간
  state       FocusState    @default(IN_PROGRESS) // 진행 상태 (진행중, 시듦, 활짝)

  member Member @relation(fields: [memberId], references: [id])
  flower Flower @relation(fields: [flowerId], references: [id])
}

enum FocusState {
  IN_PROGRESS  // "진행중"
  WILTED       // "시듦"
  BLOOMED      // "활짝"
}

enum MissionType {
  CONSECUTIVE_PLANTING    //'연속 심기 미션'
  TOTAL_FLOWERS           //'가드너 미션 - 꽃 몇개 심음?
  FOCUS_TIME              //'집중시간 미션'
}